org  100h  

jmp start
      
i8 db 0
i16 dw 0

p1:
mov ax, 1
ret

start:

mov ax, -9
mov bx, 4
idiv bl

; test bit shifting
mov ax, 1
shl ax, 2
sal ax, 3
shr al, 1
shr al, 2
mov bl, al
mov bh, al
shl bx, 3

; test logic
mov ax, 222h
and ax, 0ffh
xor ax, 2h
or ax, 080h
and al, 0
or al, 1
xor al, al
mov al, 0ffh
or [i8], al
mov bl, [i8]

xor ax, ax
inc ax
inc al
inc [i8]
mov bl, [i8]

mov ax, 1
neg ax

mov ax, 100
@@loop:
dec ax
cmp ax, 0
jne @@loop

xor ax, ax
cmp ax, 0
mov bx, ax
cmp ax, bx
cmp al, 0
cmp al, bl
mov al, 1
cmp al, 1
cmp al, bl  

; testing sub
xor ax, ax
sub ax, 1
mov [i8], 0
sub [i8], 1
xor ax, ax
mov al, [i8]
add al, 1

; testing add

xor ax, ax
add ax, 21
mov bx, 2
add ax, bx
mov dx, 5
add dx, ax       

add al, 1
add al, 1
mov dl, 0
mov al, 2
add dl, al     

mov ax, 7700h
add ax, 2000h   

mov word [i16], 0

add word [i16], 24

add word [i16], 24   

mov ax, 2

add word [i16], ax

mov ax, word [i16]   

mov dl, 0
add dl, [i8]

mov ax, 2
out 0, ax
in ax, 0

mov ax, 256
mov bx, 255
mov cx, 192

mov [i8], al
mov [i16], ax
mov [i16], bx

mov al, [i8+1]
mov bx, [i16+4]
                  
                  
push ax  
push 4 
push bx 
push [i16]
pop dx
pop bx
pop ax
pop ax

ret

